
<style>


    .highcharts-figure,
    .highcharts-data-table table {
        min-width: 360px;
        max-width: 800px;
        margin: 1em auto;
    }

    .highcharts-data-table table {
        font-family: Verdana, sans-serif;
        border-collapse: collapse;
        border: 1px solid #ebebeb;
        margin: 10px auto;
        text-align: center;
        width: 100%;
        max-width: 500px;
    }

    .highcharts-data-table caption {
        padding: 1em 0;
        font-size: 1.2em;
        color: #555;
    }

    .highcharts-data-table th {
        font-weight: 600;
        padding: 0.5em;
    }

    .highcharts-data-table td,
    .highcharts-data-table th,
    .highcharts-data-table caption {
        padding: 0.5em;
    }

    .highcharts-data-table thead tr,
    .highcharts-data-table tr:nth-child(even) {
        background: #f8f8f8;
    }

    .highcharts-data-table tr:hover {
        background: #f1f7ff;
    }



    .highcharts-figure,
    .highcharts-data-table table {
        min-width: 310px;
        max-width: 800px;
        margin: 1em auto;
    }

    #container {
        height: 400px;
    }

    .highcharts-data-table table {
        font-family: Verdana, sans-serif;
        border-collapse: collapse;
        border: 1px solid #ebebeb;
        margin: 10px auto;
        text-align: center;
        width: 100%;
        max-width: 500px;
    }

    .highcharts-data-table caption {
        padding: 1em 0;
        font-size: 1.2em;
        color: #555;
    }

    .highcharts-data-table th {
        font-weight: 600;
        padding: 0.5em;
    }

    .highcharts-data-table td,
    .highcharts-data-table th,
    .highcharts-data-table caption {
        padding: 0.5em;
    }

    .highcharts-data-table thead tr,
    .highcharts-data-table tr:nth-child(even) {
        background: #f8f8f8;
    }

    .highcharts-data-table tr:hover {
        background: #f1f7ff;
    }



    .highcharts-figure,
    .highcharts-data-table table {
        min-width: 320px;
        max-width: 800px;
        margin: 1em auto;
    }

    .highcharts-data-table table {
        font-family: Verdana, sans-serif;
        border-collapse: collapse;
        border: 1px solid #ebebeb;
        margin: 10px auto;
        text-align: center;
        width: 100%;
        max-width: 500px;
    }

    .highcharts-data-table caption {
        padding: 1em 0;
        font-size: 1.2em;
        color: #555;
    }

    .highcharts-data-table th {
        font-weight: 600;
        padding: 0.5em;
    }

    .highcharts-data-table td,
    .highcharts-data-table th,
    .highcharts-data-table caption {
        padding: 0.5em;
    }

    .highcharts-data-table thead tr,
    .highcharts-data-table tr:nth-child(even) {
        background: #f8f8f8;
    }

    .highcharts-data-table tr:hover {
        background: #f1f7ff;
    }

    input[type="number"] {
        min-width: 50px;
    }


</style>



<div id="vc_app">
<div class="container-fluid p-3" >
    <div class="row">
        <div class="col-lg-3 col-xs-6">

            <div class="small-box" style="background-color : aliceblue">
                <div class="inner">
                    <h3>400</h3>
                    <p>Total Downloadable Games</p>
                </div>
                <div class="icon">
                    <i class="ion ion-bag"></i>
                </div>
                <a href="#" class="small-box-footer" style="color:black">More info <i class="fa fa-arrow-circle-right"></i></a>
            </div>
        </div>

        <div class="col-lg-3 col-xs-6">

            <div class="small-box">
                <div class="inner">
                    <h3>350</h3>
                    <p>Total Online Games</p>
                </div>
                <div class="icon">
                    <i class="ion ion-stats-bars"></i>
                </div>
                <a href="#" class="small-box-footer" style="color:black">More info <i class="fa fa-arrow-circle-right"></i></a>
            </div>
        </div>

        <div class="col-lg-3 col-xs-6">

            <div class="small-box" style="background-color : aliceblue">
                <div class="inner">
                    <h3>5</h3>
                    <p>Total Active Portal</p>
                </div>
                <div class="icon">
                    <i class="ion ion-person-add"></i>
                </div>
                <a href="#" class="small-box-footer" style="color:black">More info <i class="fa fa-arrow-circle-right"></i></a>
            </div>
        </div>

        <div class="col-lg-3 col-xs-6">

            <div class="small-box" style="background-color : cornsilk">
                <div class="inner">
                    <h3>7</h3>
                    <p>Total Active Patch</p>
                </div>
                <div class="icon">
                    <i class="ion ion-pie-graph"></i>
                </div>
                <a href="#" class="small-box-footer" style="color:black">More info <i class="fa fa-arrow-circle-right"></i></a>
            </div>
        </div>

    </div>


        <div class="card mt-2">
            <div class="card-header">
              
                <div class="card-body">
                    <div class="col-12"> 
                        <div class="row mb-3">

                            <div class="input-group input-group-sm" style="width: 400px; margin-left: 10px;">
                                <div class="input-group-prepend">
                                    <label class="input-group-text" for="balanceSheetDropdown">Game Type</label>
                                </div>
                                <select class="custom-select" id="gameTypeId" v-model="selectedGameType">
                                    <option value="">Select Game Type</option>
                                    <option value="1">Downloadable</option>
                                    <option value="2">Online</option>
                                </select>
                            </div>

                            <button style="margin-left: 10px" class="btn btn-info btn-sm" @@click="btnSearch()">Search</button>


                        </div>
                    </div>
                </div>
            </div>



            <div class="row">
                <div class="col-lg-6 col-xs-6">

                    <figure class="highcharts-figure">
                        <div id="container"></div>
                    
                    </figure>

                </div>

                <div class="col-lg-6 col-xs-6">

                    <figure class="highcharts-figure">
                        <div id="containerBar"></div>
                      
                    </figure>

                </div>


            </div>


            <div class="row">
                <div class="col-lg-6 col-xs-6">
                    <figure class="highcharts-figure">
                        <div id="containerPie"></div>
                      
                    </figure>

                </div>

            </div>




            <div class="card mt-2" v-cloak>
                <div class="card-body">

                    <div class="col-12" id="OnlinegameLstId" v-if="typeSelected==2">
                        <h4>Online Game List</h4>
                        <div style="overflow-x: auto;">
                            <div class="search-container">
                                <input type="text" v-model="searchTerm" placeholder="Search">
                            </div>
                            <div class="button-container">
             @*                    <button type="button" class="btn btn-outline-info btn-sm" @@click="OpenModalOnlone()">Game Add</button> *@

                            </div>
                            <table class="table table-bordered table-striped" id="gameTable" style="table-layout: fixed;">

                                <thead>
                                    <tr>
                                        <th>Name</th>
                                        <th>Category</th>
                                        <th>Play URL</th>
                                        <th>Banner Image</th>
                                        <th>Preview Image</th>
                                        <th>Portrait Image</th>
                                        <th style="width:7%">Status</th>
                                        <th style="width:7%">Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr v-for="game in filteredGames" :key="game.id">
                                        <td>{{ game.gameName }}</td>
                                        <td>{{ game.categoryName }}</td>
                                        <td>{{ game.gameURL }}</td>
                                        <td><img :src="game.bannerImage" style="width:100%" alt="Banner Image"></td>
                                        <td><img :src="game.previewImage" style="width:100%" alt="previewImage"></td>
                                        <td><img :src="game.portraitImage" style="width:100%" alt="portraitImage"></td>

                                        <td>
                                            <span v-if="game.status==true" class="label label-success">Active</span>
                                            <span v-if="game.status==false" class="label label-warning">InActive</span>
                                        </td>
                                        <td>
                                            <a href="javascript:;" v-on:click="editGame(game)"><i class="far fa-edit"></i></a>
                                            <a href="javascript:;"><i class="fas fa-trash"></i></a>
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>


                    </div>
                    <div class="col-12" id="OnlinegameLstId" v-if="typeSelected==1">

                        <h4>Downloadable Game List</h4>
                        <div style="overflow-x: auto;">
                            <div class="search-container">
                                <input type="text" v-model="searchTerm" placeholder="Search">
                            </div>
                            <div class="button-container">
                               @*  <button type="button" class="btn btn-outline-info btn-sm" @@click="OpenModalDownload()">Game Add</button> *@

                            </div>
                            <table class="table table-bordered table-striped" id="gameTable" style="table-layout: fixed;">

                                <thead>
                                    <tr>
                                        <th>Name</th>
                                        <th>Category</th>
                                        <th>Size</th>
                                        <th>Android Version</th>
                                        <th>APK Location</th>
                                        <th>Banner Image</th>
                                        <th>Preview Image</th>
                                        <th>Portrait Image</th>
                                        <th style="width:7%">Status</th>
                                        @* <th style="width:7%">Action</th> *@
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr v-for="game in filteredGames" :key="game.id">
                                        <td>{{ game.gameName }}</td>
                                        <td>{{ game.categoryName }}</td>
                                        <td>{{ game.size }}</td>
                                        <td>{{ game.androidVersion }}</td>
                                        <td>{{ game.apkLocation }}</td>
                                        <td><img :src="game.bannerImage" style="width:100%" alt="Banner Image"></td>
                                        <td><img :src="game.previewImage" style="width:100%" alt="previewImage"></td>
                                        <td><img :src="game.portraitImage" style="width:100%" alt="portraitImage"></td>

                                        <td>
                                            <span v-if="game.status==true" class="label label-success">Active</span>
                                            <span v-if="game.status==false" class="label label-warning">InActive</span>
                                        </td>
                                     @*    <td>
                                            <a href="javascript:;" @@click="editGame(game)"><i class="far fa-edit"></i></a>
                                            <a href="javascript:;"><i class="fas fa-trash"></i></a>
                                        </td> *@
                                    </tr>
                                </tbody>
                            </table>
                        </div>

                    </div>

                </div>
            </div>

          

        </div>


</div>

</div>


            


@section scripts{




    <script src="https://code.highcharts.com/highcharts.js"></script>
    <script src="https://code.highcharts.com/modules/series-label.js"></script>
    <script src="https://code.highcharts.com/modules/exporting.js"></script>
    <script src="https://code.highcharts.com/modules/export-data.js"></script>
    <script src="https://code.highcharts.com/modules/accessibility.js"></script>

    <script>

   
        var app = new Vue({
            el: '#vc_app',
            data() {
                return {

                    selectedGameType: '',
                    typeSelected: '',
                    games: [],
                    gateCategoryList: [],
                    searchTerm: '',
                    itemG: {},
                    isActiveChecked: false,
                    datatableOptions: {
                        searching: true,
                        paging: true,
                        lengthChange: false,
                        ordering: true,
                        info: false,
                        responsive: true,
                    },
                    filteredGames: [],
                    PiE:[],
                    BarChartZ: [],

                    LineChart: [],
                    dataa:[],
                    selectedFile: null

                    

                };
            },

            computed: {
           
            },
            methods: {



                btnSearch(){

                  this.getData();
                  this.getDataPie();
                    this.getBarChatData();
                    this.getLineChatData();
                },


                getData() {

                    const gameTypeId = this.selectedGameType;

                    this.typeSelected = gameTypeId;

                    // /game/GetGameList

                    helper.get('api/Billboards/GetGameList',
                        { type: gameTypeId },
                        (response) => {
                            console.log(response);
                            this.filteredGames = response;

                        });
                },


                // async fetchData() {
                //     await this.getDataPie();
                //     this.PieChat();
                // },


                getDataPie() {

                    const gameTypeId = this.selectedGameType;

                    this.typeSelected = gameTypeId;

                    // /game/GetGameList

                    helper.get('api/Billboards/PIEChart',
                        { type: gameTypeId },
                        (response) => {
                            // console.log(response);
                            this.PiE = response;

                            var dataaaaa = [];

                            for (var i in this.PiE) {
                                var serie = new Array(this.PiE[i].categoryName, this.PiE[i].total);

                                dataaaaa.push(serie);

                            }

                            Highcharts.chart('containerPie', {
                                chart: {
                                    type: 'pie'
                                },
                                title: {
                                    text: 'Games Type'
                                },
                                tooltip: {
                                    valueSuffix: '%'
                                },
                                subtitle: {
                                    text:
                                        ':<a href="#" target="_default"></a>'
                                },
                                plotOptions: {
                                    series: {
                                        allowPointSelect: true,
                                        cursor: 'pointer',
                                        dataLabels: [{
                                            enabled: true,
                                            distance: 20
                                        }, {
                                            enabled: true,
                                            distance: -40,
                                            format: '{point.percentage:.1f}%',
                                            style: {
                                                fontSize: '1.2em',
                                                textOutline: 'none',
                                                opacity: 0.7
                                            },
                                            filter: {
                                                operator: '>',
                                                property: 'percentage',
                                                value: 10
                                            }
                                        }]
                                    }
                                },
                                series: [
                                    {
                                        name: 'Percentage',

                                        data: dataaaaa

                                    }
                                ]
                            });



                        });

                },


                getBarChatData(){


                    const gameTypeId = this.selectedGameType;

                    this.typeSelected = gameTypeId;

                    helper.get('api/Billboards/BARChart',
                        { type: gameTypeId },
                        (response) => {

                            this.BarChartZ = response;



                            Highcharts.chart('containerBar', {
                                chart: {
                                    type: 'bar'
                                },
                                title: {
                                    text: 'Year Wise Games User',
                                    align: 'left'
                                },
                                subtitle: {
                                    text: ': <a ' +
                                        'href="#"' +
                                        'target="_blank"></a>',
                                    align: 'left'
                                },
                                xAxis: {
                                    categories: ['Action', 'Puzzle','Racing','strategy','Sport'],
                                    title: {
                                        text: null
                                    },
                                    gridLineWidth: 1,
                                    lineWidth: 0
                                },
                                yAxis: {
                                    min: 0,
                                    title: {
                                        text: 'Population (millions)',
                                        align: 'high'
                                    },
                                    labels: {
                                        overflow: 'justify'
                                    },
                                    gridLineWidth: 0
                                },
                                tooltip: {
                                    valueSuffix: ' millions'
                                },
                                plotOptions: {
                                    bar: {
                                        borderRadius: '50%',
                                        dataLabels: {
                                            enabled: true
                                        },
                                        groupPadding: 0.1
                                    }
                                },
                                legend: {
                                    layout: 'vertical',
                                    align: 'right',
                                    verticalAlign: 'top',
                                    x: -40,
                                    y: 80,
                                    floating: true,
                                    borderWidth: 1,
                                    backgroundColor:
                                        Highcharts.defaultOptions.legend.backgroundColor || '#FFFFFF',
                                    shadow: true
                                },
                                credits: {
                                    enabled: false
                                },
                                series: this.BarChartZ
                            });
                      


                        });
       
                },


                getLineChatData() {

                    const gameTypeId = this.selectedGameType;

                    this.typeSelected = gameTypeId;

                    helper.get('api/Billboards/LineChart',
                        { type: gameTypeId },
                        (response) => {

                            this.LineChart = response;


                            console.log(this.LineChart);

                            Highcharts.chart('container', {

                                title: {
                                    text: 'Year Wise Games User',
                                    align: 'left'
                                },

                                subtitle: {
                                    text: ' : <a href="#" target="_blank"></a>.',
                                    align: 'left'
                                },

                                yAxis: {
                                    title: {
                                        text: 'Number of User'
                                    }
                                },

                                xAxis: {
                                    accessibility: {
                                        rangeDescription: 'Range: 2010 to 2020'
                                    }
                                },

                                legend: {
                                    layout: 'vertical',
                                    align: 'right',
                                    verticalAlign: 'middle'
                                },

                                plotOptions: {
                                    series: {
                                        label: {
                                            connectorAllowed: false
                                        },
                                        pointStart: 2010
                                    }
                                },

                                series: this.LineChart,

                                responsive: {
                                    rules: [{
                                        condition: {
                                            maxWidth: 500
                                        },
                                        chartOptions: {
                                            legend: {
                                                layout: 'horizontal',
                                                align: 'center',
                                                verticalAlign: 'bottom'
                                            }
                                        }
                                    }]
                                }

                            });




                        });

                },


                editGame(game) {
                    this.itemG = game;
                    $('#mdl_game').modal('show');

                },

                OpenModalDownload() {
                    $('#mdl_gamee').modal('show');
                    $('#mdl_gameOnline').modal('hide');
                },

                OpenModalOnlone() {
                    $('#mdl_gameOnline').modal('show');
                    $('#mdl_gamee').modal('hide');
                },


                handleFileUpload(event) {
                    // Access the selected file from the event
                    this.selectedFile = event.target.files[0];
                },
                UploadDownlodableFile() {

                    if (this.selectedFile) {

                        const formData = new FormData()
                        formData.append('file', this.selectedFile)
                        console.log(formData);
                   
                        $.ajax({
                            url: '/Game/ImportExcelDownloadable',
                            type: 'POST',
                            data: formData,
                            contentType: false,
                            processData: false,
                            async: true,
                            success: function (data) {

                                $('#mdl_gamee').modal('hide');
                                fileInput.value = null;
                                this.selectedFile = null;
                                alert('Successfully importing Excel file.');
                                // $.notify(response.message, 'success');
                            },
                            error: function () {
                                // alert('Error importing Excel file.');
                                $.notify(response.message, 'error');
                            },
                            complete: function () {

                            }

                        });
                    } else {
                        this.selectedFileName = 'No file selected';
                    }
                },

                handleFileUploadOnline(event) {
                    // Access the selected file from the event
                    this.selectedFile = event.target.files[0];


                },

              


                UploadOnlineFile() {
                    // Update the displayed file name
                    if (this.selectedFile) {

                        const formData = new FormData()
                        formData.append('file', this.selectedFile)
                        console.log(formData);
             
                        $.ajax({
                            url: '/Game/ImportExcelOnline',
                            type: 'POST',
                            data: formData,
                            contentType: false,
                            processData: false,
                            async: true,
                            success: function (data) {
                                $('#mdl_gameOnline').modal('hide');
                                this.fileInputOn.value = null;
                                this.selectedFile = null;
                                alert('Successfully importing Excel file.');

                            },
                            error: function () {

                                $.notify(response.message, 'error');
                            },
                            complete: function () {

                            }

                        });

                    } else {
                        this.selectedFileName = 'No file selected';
                    }
                },

                BarChart() {

                    Highcharts.chart('containerBar', {
                        chart: {
                            type: 'bar'
                        },
                        title: {
                            text: 'Historic World Population by Region',
                            align: 'left'
                        },
                        subtitle: {
                            text: 'Source: <a ' +
                                'href="https://en.wikipedia.org/wiki/List_of_continents_and_continental_subregions_by_population"' +
                                'target="_blank">Wikipedia.org</a>',
                            align: 'left'
                        },
                        xAxis: {
                            categories: ['Africa', 'America'],
                            title: {
                                text: null
                            },
                            gridLineWidth: 1,
                            lineWidth: 0
                        },
                        yAxis: {
                            min: 0,
                            title: {
                                text: 'Population (millions)',
                                align: 'high'
                            },
                            labels: {
                                overflow: 'justify'
                            },
                            gridLineWidth: 0
                        },
                        tooltip: {
                            valueSuffix: ' millions'
                        },
                        plotOptions: {
                            bar: {
                                borderRadius: '50%',
                                dataLabels: {
                                    enabled: true
                                },
                                groupPadding: 0.1
                            }
                        },
                        legend: {
                            layout: 'vertical',
                            align: 'right',
                            verticalAlign: 'top',
                            x: -40,
                            y: 80,
                            floating: true,
                            borderWidth: 1,
                            backgroundColor:
                                Highcharts.defaultOptions.legend.backgroundColor || '#FFFFFF',
                            shadow: true
                        },
                        credits: {
                            enabled: false
                        },
                        series: [{
                            name: 'Year 1990',
                            data: [631,10]
                        }, {
                            name: 'Year 2000',
                            data: [814,30]
                        }]
                    });
                
                },


                downloadFile() {
                    // Replace 'yourFileName' with the actual file name you want to download
                    // const fileName = "Game_Upload_List.xlsx";

                    const fileName = "";
                    // window.location.href = "@Url.Action("DownloadFile", "Game")?fileName=" + fileName;
                    window.location.href = "@Url.Action("DownloadFile", "Game")";
                },

                getGameCategory() {

                    // /game/GetGameCategory

                    helper.get('api/Billboards/GetGameCategory',
                        {},
                        (response) => {
                            console.log(response);
                            this.gateCategoryList = response;
                        });
                },
                UpdateGame() {
                    debugger;
                    console.log(this.itemG);
                    helper.post('/game/UpdateGameInfo', this.itemG, (response) => {
                        debugger;
                        if (response) {

                            this.getData();
                            $('#mdl_game').modal('hide');
                        }
                        else {
                            $.notify(response.message, 'error');
                        }
                    });
                },
             
                                                                                                     
            },     
            mounted() {
              //  this.getData();

                helper.blockUI();
                helper.unBlockUI();

          //     this.getDataPie();
         
        
            },

        });
      
    </script>





 

    }