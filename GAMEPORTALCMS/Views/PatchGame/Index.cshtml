@{
    ViewData["Title"] = "patch Games";
}

<style>
    /* Custom styles for the draggable lists */
    .custom-list {
        border: 1px solid #ccc;
        background-color: #f8f8f8;
        padding: 10px;
        border-radius: 5px;
    }

    /* Custom styles for list items */
    .custom-list-item {
        background-color: #fff;
        border: 1px solid #ddd;
        margin-bottom: 5px;
        padding: 10px;
        border-radius: 3px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

        .custom-list-item:hover {
            background-color: #f0f0f0;
        }

</style>

<div id="vc_app">
    <div class="container-fluid" id="appD">
        <div class="card mt-2">
            <div class="card-header">
                <div class="d-flex align-items-center">
                    <h5 class="mr-auto">Add Game in Patch</h5>
                </div>
                <div class="card-body">
                    <div class="col-12">
                        <div class="row mb-3">
                            <div class="input-group input-group-sm" style="width: 400px">
                                <div class="input-group-prepend">
                                    <label class="input-group-text" for="balanceSheetDropdown">Game Portal</label>
                                </div>
                                <select class="custom-select" id="portalId" v-model="selectedGamePortal">
                                    <option value="1">Play2Win</option>
                                </select>
                            </div>

                            <div class="input-group input-group-sm" style="width: 400px; margin-left: 10px;">
                                <div class="input-group-prepend">
                                    <label class="input-group-text" for="patchDropDownId">Patch</label>
                                </div>
                                <select class="custom-select" id="patchId" v-model="patchSelected">
                                    <option v-for="item in patchList" :key="item.id" :value="item.id">
                                        {{ item.patchName }}
                                    </option>
                                </select>
                            </div>

                            <button style="margin-left: 10px" class="btn btn-info btn-sm" @@click="getData()">Search</button>
                        </div>
                    </div>
                </div>
            </div>

        </div>

        <div class="card mt-2" v-cloak>
            <div class="card-body">
                <template>
                    <div class="row">
                        <div class="col-6">
                            <h3>Game List</h3>
                            <input type="text" v-model="searchQuery" placeholder="Search..." class="form-control mb-3">
                            <draggable class="custom-list" :list="filteredItems" group="people" style="max-height: 500px; overflow-y: auto; border: 1px solid lightgray;">
                                <div class="custom-list-item" v-for="(element, index) in filteredItems" :key="element.id">
                                    <div style="display: flex; align-items: center; justify-content: space-between;">
                                        <span style="display: flex; flex-direction: column;">
                                            <span style="color: black; font-weight: bold;font-size:22px">{{ element.name }}</span>
                                        </span>
                                        <img style="height: 100px; width: 100px; border-radius: 50%; border: 2px solid #000;" v-bind:src="element.previewImageURL" />
                                    </div>
                                </div>
                            </draggable>
                        </div>

                        <div class="col-6">
                            <h3>Patch Game List</h3>
                            <draggable class="custom-list" :list="patchgamesList" group="people" @@remove="gameRemove" @@add="gameChange" @@sort="sortGame" style="max-height: 500px; overflow-y: auto;min-height:300px;border:1px solid lightgray">
                                <div class="custom-list-item" v-for="(element, index) in patchgamesList" :key="element.id" :data-id="element.id">
                               
                                    <div style="display: flex; align-items: center; justify-content: space-between;">
                                        <span style="display: flex; flex-direction: column;">
                                            <span style="color: black; font-weight: bold;font-size:22px">{{ element.name }}</span>
                                            <span style="font-size: 16px; color: gray;">Serial: {{ index+1 }}</span>
                                        </span>
                                        <img style="height: 100px; width: 100px; border-radius: 50%; border: 2px solid #000;" v-bind:src="element.previewImageURL" />
                                    </div>




                                </div>
                            </draggable>
                        </div>
                    </div>
                </template>
            </div>
        </div>

    </div>


</div>



@section scripts{
    <script src="//cdn.jsdelivr.net/npm/sortablejs@1.8.4/Sortable.min.js"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/Vue.Draggable/2.20.0/vuedraggable.umd.min.js"></script>
    <script>
        var app = new Vue({
            el: '#vc_app',
            data() {
                return {
                    searchQuery: '',
                    patchList: [],
                    selectedGamePortal: 1,
                    patchSelected: "",
                    gameList: [],
                    patchgamesList: [],
                    removedOpen: false,
                    isAddState:false,

                };
            },

            methods: {

                getPatchByPortal() {
                    const portalValue = this.selectedGamePortal;
                    helper.get('/patch/GetPatchlistByPortal',
                        { portalValue: portalValue },
                        (response) => {
                            console.log(response);
                            this.patchList = response;

                        });
                },

                getData() {
                    console.log(this.patchList);
                    var patch = this.patchList.find(x => x.id == this.patchSelected);
                    let patchTypeId = patch.patchType;
                    helper.get('/PatchGame/GetGamePatchandgames',
                        { patchId: this.patchSelected, gameType: patchTypeId },
                        (response) => {
                            this.gameList = response.gamedata;
                            this.patchgamesList = response.patchGameData;
                            this.patchgamesList.forEach(patchItem => {
                                this.gameList = this.gameList.filter(gameItem => gameItem.id !== patchItem.id);
                            });

                        });
                },

                UpdateGame() {
                    $.ajax({
                        type: "POST",
                        url: '/PatchGame/SavePatchGames',
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: JSON.stringify({
                            patchgamesList: this.patchgamesList,
                            patchId: this.patchSelected
                        }),
                        success: function (response) {
                        },
                        error: function () {

                        }
                    });
                },
                gameChange: function (evt) {
                    this.isAddState = true;
                    if (this.removedOpen == true) {
                    } else {
                        if (this.patchgamesList.length > 0) {
                            this.UpdateGame();
                        }
                    }      
                    this.removedOpen = false;


                },
                sortGame:function(evt){
               
                    if (this.isAddState == false && this.removedOpen == false){
                        if (this.patchgamesList.length > 0) {
                            this.UpdateGame();
                        }
                    }
                    this.isAddState = false;
                  
                },
                gameRemove: function (evt) {
                    this.removedOpen = true;
                    const removedItemId = evt.item.getAttribute('data-id');
                     helper.get('/PatchGame/DeletePatchGame',
                        { gameId: removedItemId, patchId: this.patchSelected },
                         (response) => {

                         });
                },
            },


            mounted() {
                this.getPatchByPortal();
            },
            computed: {
                filteredItems: function () {
                    if (this.gameList != null) {
                        return this.gameList.filter(item => item.name.toLowerCase().includes(this.searchQuery.toLowerCase()));

                    }
                }
            },

        });
    </script>
}